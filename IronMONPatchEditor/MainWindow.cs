using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Diagnostics.Eventing.Reader;
using System.IO;
using System.Text;
using System.Windows.Forms;


namespace IronMONPatchEditor
{
    public partial class MainScreen : Form
    {
        public MainScreen()
        {
            InitializeComponent();
            mapToASCII = new Dictionary<byte, char>
            {
                { 0xA1, '0' },{ 0xA2, '1' },{ 0xA3, '2' },{ 0xA4, '3' },{ 0xA5, '4' },{ 0xA6, '5' },{ 0xA7, '6' },{ 0xA8, '7' },
                { 0xA9, '8' },{ 0xAA, '9' },{ 0xAB, '!' },{ 0xAC, '?' },{ 0xBB, 'A' },{ 0xBC, 'B' },{ 0xBD, 'C' },{ 0xBE, 'D' },
                { 0xBF, 'E' },{ 0xC0, 'F' },{ 0xC1, 'G' },{ 0xC2, 'H' },{ 0xC3, 'I' },{ 0xC4, 'J' },{ 0xC5, 'K' },{ 0xC6, 'L' },
                { 0xC7, 'M' },{ 0xC8, 'N' },{ 0xC9, 'O' },{ 0xCA, 'P' },{ 0xCB, 'Q' },{ 0xCC, 'R' },{ 0xCD, 'S' },{ 0xCE, 'T' },
                { 0xCF, 'U' },{ 0xD0, 'V' },{ 0xD1, 'W' },{ 0xD2, 'X' },{ 0xD3, 'Y' },{ 0xD4, 'Z' },{ 0xD5, 'a' },{ 0xD6, 'b' },
                { 0xD7, 'c' },{ 0xD8, 'd' },{ 0xD9, 'e' },{ 0xDA, 'f' },{ 0xDB, 'g' },{ 0xDC, 'h' },{ 0xDD, 'i' },{ 0xDE, 'j' },
                { 0xDF, 'k' },{ 0xE0, 'l' },{ 0xE1, 'm' },{ 0xE2, 'n' },{ 0xE3, 'o' },{ 0xE4, 'p' },{ 0xE5, 'q' },{ 0xE6, 'r' },
                { 0xE7, 's' },{ 0xE8, 't' },{ 0xE9, 'u' },{ 0xEA, 'v' },{ 0xEB, 'w' },{ 0xEC, 'x' },{ 0xED, 'y' },{ 0xEE, 'z' },
                { 0x00, ' ' },{ 0xAD, '.' },{ 0xAE, '-' },{ 0xB8, ',' },{ 0xBA, '/' }
            };
        }

        private void Form1_Load(object sender, EventArgs e)
        {

        }

        readonly OpenFileDialog ofd = new OpenFileDialog();
        string currentROM;
        string gameCode;
        string fireRedVersion;
        private uint playerGender;
        private uint playerName;
        private uint rivalName;
        private uint stepItems1;
        private uint instaPC;
        private uint instaPCCheck;
        private uint speechSkip;
        private uint speechSkipInfo;
        private uint speechSkipInfo2;
        private uint speechSkipInfo3;
        private uint speechSkipInfo4;
        private uint patchCheck;
        

        private readonly Dictionary<byte, char> mapToASCII;

        private void BtnLoadROM_Click(object sender, EventArgs e)
        {
            try
            {
                ofd.Filter = "GBA ROM (*.gba)|*.gba"; //Makes a filter for the open file dialog.
                if (ofd.ShowDialog() == DialogResult.OK) //Shows the dialog and checks if the user chose a file
                {
                    currentROM = ofd.FileName;
                    using (BinaryReader br = new BinaryReader(File.OpenRead(currentROM)))//This is the position that the BinaryReader will read the hex data. The code from 0xAC to 0xAF is the game version. It also creates another integer, used for the data.
                    {
                        br.BaseStream.Seek(0xAC, SeekOrigin.Begin);
                        gameCode = Encoding.ASCII.GetString(br.ReadBytes(4)); //Sets the string of the string "gameCode" to the four bytes of the game code.
                        Console.WriteLine("Gamecode: " + gameCode);
                    }

                    labelLoadedROM.Text = "ROM: " + ofd.SafeFileName + " | " + gameCode;
                    //string[] gameCodeArray = { "AXVE", "AXPE", "BPRE", "BPGE", "BPEE" };
                    //if (gameCodeArray.Contains(gameCode))
                    //{

                    using (BinaryReader br = new BinaryReader(File.OpenRead(currentROM)))
                    {
                        rivalNameTextBox.Text = String.Empty;
                        playerNameTextBox.Text = String.Empty;
                        radioItemsOn.Checked = false;
                        radioItemsRNG.Checked = false;
                        radioButtonFemale.Checked = false;
                        radioButtonMale.Checked = false;
                        speechSkipButtonOff.Checked = false;
                        speechSkipButtonOn.Checked = false;

                        if (gameCode == "BPEE") // Emerald
                        {
                            playerName = 0x5E8631;
                            playerGender = 0x3085A;
                            instaPCCheck = 0x271935;
                            instaPC = 0x27191E;
                            speechSkip = 0xE40000;
                            speechSkipInfo2 = 0x23BEE5;
                            speechSkipInfo3 = 0x084378;
                            speechSkipInfo4 = 0x0307B0;
                            patchCheck = 0x0008AE;

                            br.BaseStream.Seek(this.patchCheck, SeekOrigin.Begin);
                            string patchChecker = Convert.ToString(br.ReadByte());
                            if (patchChecker != "5")
                            {
                                DisableEverything();
                                MessageBox.Show("Faster Emerald Patch hasn't been applied yet. Make sure to patch your ROM first before using this tool.", "Unsupported ROM", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            }

                            EnableEverything();
                            rivalNameTextBox.Enabled = false;
                            stepItemsBox.Enabled = false;

                            br.BaseStream.Seek(instaPCCheck, SeekOrigin.Begin);
                            string instantPC = Convert.ToString(br.ReadByte());
                            if (instantPC == "4")
                                instaPCOn.Checked = true;
                            else
                                instaPCOff.Checked = true;

                            br.BaseStream.Seek(playerGender, SeekOrigin.Begin);
                            string gender = Convert.ToString(br.ReadByte());
                            if (gender == "1")
                                radioButtonFemale.Checked = true;
                            if (gender == "0") 
                                radioButtonMale.Checked = true;

                            br.BaseStream.Seek(speechSkipInfo2, SeekOrigin.Begin);
                            string speechSkipCheck = Convert.ToString(br.ReadByte());
                            Console.WriteLine("Speech: " + speechSkipCheck);
                            if (speechSkipCheck == "35")
                                speechSkipButtonOn.Checked = true;
                            if (speechSkipCheck == "162")
                                speechSkipButtonOff.Checked = true;

                        }
                        else if (gameCode == "BPRE") // FireRed
                        {
                            playerName = 0x780034;
                            rivalName = 0x78003C;
                            playerGender = 0x780044;
                            stepItems1 = 0x479DA0;
                            speechSkipInfo = 0x780000;
                            speechSkipInfo2 = 0x780045;
                            patchCheck = 0x0860D6;

                            EnableEverything();
                            rivalNameTextBox.Enabled = true;

                            br.BaseStream.Seek(this.patchCheck, SeekOrigin.Begin);
                            string patchChecker = Convert.ToString(br.ReadByte());
                            Console.WriteLine("patchCheck = " + patchChecker);
                            if (patchChecker == "255") // DrSeil Intro Patch
                            {
                                //playerName = 0x780034;
                                //rivalName = 0x78003C;
                                //playerGender = 0x780044;
                                //stepItems1 = 0x479DA0;
                                //instaPC = 0x1A65FE;
                                speechSkip = 0xC8ABD0;
                                //speechSkipInfo = 0x780000;
                                //speechSkipInfo2 = 0x780045;
                                speechSkipInfo3 = 0xC8D2A0;
                                fireRedVersion = "OldFireRed";
                            }
                            else if (patchChecker == "0") // Faster FireRed or Rev0
                            {
                                br.BaseStream.Seek(0x0860D5, SeekOrigin.Begin);
                                string patchChecker2 = Convert.ToString(br.ReadByte());
                                Console.WriteLine("patchChecker2 = " + patchChecker2);
                                if (patchChecker2 == "96") // Faster FireRed
                                {
                                    speechSkip = 0x12EF04;
                                    speechSkipInfo3 = 0x054968;
                                    fireRedVersion = "FasterFireRed";

                                    instaPCBox.Enabled = false;
                                }
                                else
                                {
                                    DisableEverything();
                                    MessageBox.Show("FireRed Intro Patch hasn't been applied yet. Make sure to patch your ROM first before using this tool.", "Unsupported ROM", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                }
                            }
                            else
                            {
                                DisableEverything();
                                MessageBox.Show("FireRed Intro Patch hasn't been applied yet. Make sure to patch your ROM first before using this tool.", "Unsupported ROM", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            }


                            br.BaseStream.Seek(speechSkip, SeekOrigin.Begin);
                            string introSpeech = Convert.ToString(br.ReadByte());
                            if (introSpeech == "1")
                                speechSkipButtonOn.Checked = true;
                            else 
                            {
                                speechSkipButtonOff.Checked = true;
                                nameGroupBox.Enabled = false;
                            }

                            br.BaseStream.Seek(rivalName, SeekOrigin.Begin);
                            rivalNameTextBox.Text = ROMCharactersToString(7, rivalName);
                            Console.WriteLine("Current Rival Name: " + rivalNameTextBox.Text);

                            br.BaseStream.Seek(instaPC, SeekOrigin.Begin);
                            string instantPC = Convert.ToString(br.ReadByte());
                            br.BaseStream.Seek(0x0860D5, SeekOrigin.Begin);
                            string patchChecker3 = Convert.ToString(br.ReadByte());
                            if (patchChecker3 == "96")
                            {
                                instaPCOn.Checked = false;
                                instaPCOff.Checked = false;
                            }
                            else if (instantPC == "4")
                                instaPCOn.Checked = true;
                            else
                                instaPCOff.Checked = true;

                            br.BaseStream.Seek(stepItems1, SeekOrigin.Begin);
                            string stepItems = Convert.ToString(br.ReadByte());
                            if (stepItems == "255")
                                radioItemsOn.Checked = true;
                            else
                            {
                                radioItemsRNG.Checked = true;
                            }
                            br.BaseStream.Seek(playerGender, SeekOrigin.Begin);
                            string gender = Convert.ToString(br.ReadByte());
                            if (gender == "1")
                                radioButtonFemale.Checked = true;
                            if (gender == "0")
                                radioButtonMale.Checked = true;
                        }
                        else
                        {
                            DisableEverything();
                            MessageBox.Show("Unsupported ROM loaded. Please load a FireRed or Emerald ROM with the correct patch applied.", "Unsupported ROM", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        }

                        br.BaseStream.Seek(playerName, SeekOrigin.Begin);
                        playerNameTextBox.Text = ROMCharactersToString(7, playerName);
                        Console.WriteLine("Currect Name: " + playerNameTextBox.Text);
                    }
                }
            }
            catch (IOException ex)
            {
                Console.WriteLine(ex.ToString());
                MessageBox.Show("Could not open the ROM.\nCheck to see if the file is open in another program.\n\n" + ex.Message, "I/O Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        private void BtnSave_Click(object sender, EventArgs e)
        {
            Encoder f = new Encoder();
            string encodedPlayerName = f.ConvertString(playerNameTextBox.Text); //-- Convert the string
            string encodedRivalName = f.ConvertString(rivalNameTextBox.Text); //-- Convert the string
            Console.WriteLine("Entered Name: " + playerNameTextBox.Text);
            Console.WriteLine("Encoded Name: " + encodedPlayerName);
            if (gameCode == "BPRE")
            {
                Console.WriteLine("Entered Rival Name: " + rivalNameTextBox.Text);
                Console.WriteLine("Encoded Rival Name: " + encodedRivalName);
            }
            try
            {
                using (BinaryWriter bw = new BinaryWriter(File.OpenWrite(currentROM)))
                {
                    bw.Seek(Convert.ToInt32(playerName), SeekOrigin.Begin);
                    for (int i = 0; i < 7; i++)
                    {
                        bw.Write((byte)0xFF);
                    }
                    bw.Seek(Convert.ToInt32(playerName), SeekOrigin.Begin);
                    bw.Write(StringToByteArray(encodedPlayerName));
                    if (gameCode == "BPRE") // FireRed
                    {
                        byte[] speechSkipInfoTrue = {
                            0xFE, 0xB4, 0x09, 0x4A, 0x12, 0x68, 0x09, 0x48, 0x09, 0x49, 0x13, 0x18, 0x54, 0x1A, 0x09, 0x48,
                            0x20, 0x60, 0x09, 0x48, 0x60, 0x60, 0x09, 0x48, 0x18, 0x60, 0x09, 0x48, 0x58, 0x60, 0x09, 0x48,
                            0x20, 0x72, 0xFE, 0xBC, 0x08, 0x48, 0x00, 0x47, 0x08, 0x50, 0x00, 0x03, 0x4C, 0x3A, 0x00, 0x00,
                            0xA4, 0x0F, 0x00, 0x00
                            };
                        byte[] speechSkipInfo2True =
                        {
                            0x00, 0x00, 0x00, 0x59, 0x66, 0x05, 0x08
                        };
                        bw.Seek(Convert.ToInt32(speechSkipInfo), SeekOrigin.Begin);
                        bw.Write(speechSkipInfoTrue);
                        bw.Seek(Convert.ToInt32(speechSkipInfo2), SeekOrigin.Begin);
                        bw.Write(speechSkipInfo2True);

                        bw.Seek(Convert.ToInt32(rivalName), SeekOrigin.Begin);
                        for (int i = 0; i < 7; i++)
                        {
                            bw.Write((byte)0xFF);
                        }
                        bw.Seek(Convert.ToInt32(rivalName), SeekOrigin.Begin);
                        bw.Write(StringToByteArray(encodedRivalName));
                        if (radioItemsOn.Checked == true)
                        {
                            byte[] alwaysItems = {  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                                                    0x03, 0x27, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                                                    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x1F, 0x00, 0x00,
                                                    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                                                    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x22, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
                                                    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                                                    0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x41, 0x00, 0x00, 0x40, 0x41, 0x42, 0x43, 0xFF, 0xFF, 0xFF, 0xFF,
                                                    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                                                    0x01, 0x02, 0x00, 0x00, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0xFF, 0xFF, 0x54, 0x55, 0x56, 0xFF,
                                                    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x6D, 0x00, 0x00,
                                                    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                                                    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x2E, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
                                                    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                                                    0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x30, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                                                    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                                                    0x03, 0x0F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xA8, 0xFF, 0xFF, 0xFF,
                                                    0xFF, 0xFF, 0xFF, 0xFF, 0xA9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x39, 0x00, 0x00,
                                                    0xAA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                                                    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x36, 0x00, 0x00, 0xAE, 0xB0, 0xFF, 0xFF,
                                                    0xFF, 0xFF, 0xFF, 0xFF, 0xAF, 0xB1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                                                    0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x3A, 0x00, 0x00, 0xB2, 0xB3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                                                    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                                                    0x03, 0x3B, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                                                    0xFF, 0xFF, 0xFF, 0xFF, 0xB4, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x3E, 0x00, 0x00,
                                                    0xB9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xBA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                                                    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
                            bw.Seek(Convert.ToInt32(stepItems1), SeekOrigin.Begin);
                            bw.Write(alwaysItems);
                        }
                        if (radioItemsRNG.Checked)
                        {
                            byte[] randomItems = {  0x99, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                                                    0x03, 0x27, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x9A, 0xFF, 0xFF, 0xFF,
                                                    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x1F, 0x00, 0x00,
                                                    0x4C, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0xFF, 0xFF,
                                                    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x22, 0x00, 0x00, 0x53, 0xFF, 0xFF, 0xFF,
                                                    0xFF, 0xFF, 0xFF, 0xFF, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                                                    0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x41, 0x00, 0x00, 0x40, 0x41, 0x42, 0x43, 0xFF, 0xFF, 0xFF, 0xFF,
                                                    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                                                    0x01, 0x02, 0x00, 0x00, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0xFF, 0xFF, 0x54, 0x55, 0x56, 0xFF,
                                                    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x6D, 0x00, 0x00,
                                                    0x5B, 0x5D, 0x5E, 0x5F, 0x63, 0x64, 0x65, 0x66, 0x5B, 0x5D, 0x5E, 0x5F, 0x63, 0x64, 0x65, 0xFF,
                                                    0x5A, 0x5C, 0x60, 0x61, 0x62, 0xFF, 0xFF, 0xFF, 0x03, 0x2E, 0x00, 0x00, 0x6B, 0x6C, 0x6D, 0x6E,
                                                    0xFF, 0xFF, 0xFF, 0xFF, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0xFF, 0xFF, 0x6B, 0x6C, 0xFF, 0xFF,
                                                    0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x30, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                                                    0xA6, 0xA7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                                                    0x03, 0x0F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xA8, 0xFF, 0xFF, 0xFF,
                                                    0xFF, 0xFF, 0xFF, 0xFF, 0xA9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x39, 0x00, 0x00,
                                                    0xAA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                                                    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x36, 0x00, 0x00, 0xAE, 0xB0, 0xFF, 0xFF,
                                                    0xFF, 0xFF, 0xFF, 0xFF, 0xAF, 0xB1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                                                    0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x3A, 0x00, 0x00, 0xB2, 0xB3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                                                    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                                                    0x03, 0x3B, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                                                    0xFF, 0xFF, 0xFF, 0xFF, 0xB4, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x3E, 0x00, 0x00,
                                                    0xB9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xBA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                                                    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
                            };
                            bw.Seek(Convert.ToInt32(stepItems1), SeekOrigin.Begin);
                            bw.Write(randomItems);
                        }
                        if (instaPCOn.Checked)
                        {
                            byte[] instaPCOn = { 0x04, 0x30,
                                                 0x66, 0x1A, 0x08, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                                                 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                                                 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                                                 0xC3, 0x0F, 0x04, 0x46, 0x66, 0x1A, 0x08, 0x25, 0x69, 0x01, 0x05, 0x64, 0x66, 0x1A, 0x08, 0xFF,
                                                 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x4F, 0x0F, 0x80, 0x5F, 0x76, 0x1A, 0x08, 0x51, 0x00, 0x00,
                                                 0x9C, 0x19, 0x00, 0x9E, 0x19, 0x00, 0x4F, 0x0F, 0x80, 0x65, 0x76, 0x1A, 0x08, 0x51, 0x00, 0x00,
                                                 0x25, 0x00, 0x00, 0x03, 0x26, 0x0D, 0x80, 0xB1, 0x01, 0x21, 0x0D, 0x80, 0x00, 0x00, 0x06, 0x01,
                                                 0x95, 0x66, 0x1A, 0x08, 0x26, 0x0D, 0x80, 0x83, 0x01, 0x19, 0x08, 0x80, 0x0D, 0x80, 0x21, 0x08,
                                                 0x80, 0x00, 0x00, 0x06, 0x01, 0x95, 0x66, 0x1A, 0x08, 0x21, 0x08, 0x80, 0x01, 0x00, 0x06, 0x01,
                                                 0xAE, 0x66, 0x1A, 0x08, 0x02, 0x4F, 0x0F, 0x80, 0xE4, 0x66, 0x1A, 0x08, 0x51, 0x00, 0x00, 0x03,
                                                 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x2B, 0x42,
                                                 0x08, 0x06, 0x01, 0x95, 0x66, 0x1A, 0x08, 0x0F, 0x00, 0xA3, 0x55, 0x1A, 0x08, 0x09, 0x04, 0x29,
                                                 0x42, 0x08, 0x67, 0x3D, 0xCD, 0x1B, 0x08, 0x66, 0x4F, 0x0F, 0x80, 0xE4, 0x66, 0x1A, 0x08, 0x51,
                                                 0x00, 0x00, 0x0F, 0x00, 0x89, 0x55, 0x1A, 0x08, 0x09, 0x04, 0x03, 0x0F, 0x00, 0x89, 0x55, 0x1A,
                                                 0x08,
                            };
                            bw.Seek(Convert.ToInt32(instaPC), SeekOrigin.Begin);
                            bw.Write(instaPCOn);
                        }
                        if (instaPCOff.Checked)
                        {
                            byte[] instaPCOff = { 0x67, 0xFB,
                                                  0x54, 0x1A, 0x08, 0x66, 0x6F, 0x13, 0x08, 0x00, 0x02, 0x19, 0x00, 0x80, 0x0D, 0x80, 0x21, 0x00,
                                                  0x80, 0x00, 0x00, 0x06, 0x01, 0x30, 0x66, 0x1A, 0x08, 0x21, 0x00, 0x80, 0x01, 0x00, 0x06, 0x01,
                                                  0xDB, 0x66, 0x1A, 0x08, 0x21, 0x00, 0x80, 0x7F, 0x00, 0x06, 0x01, 0xDB, 0x66, 0x1A, 0x08, 0x02,
                                                  0xC3, 0x0F, 0x67, 0x59, 0x55, 0x1A, 0x08, 0x66, 0x04, 0x46, 0x66, 0x1A, 0x08, 0x25, 0x69, 0x01,
                                                  0x05, 0x64, 0x66, 0x1A, 0x08, 0x02, 0x4F, 0x0F, 0x80, 0x5F, 0x76, 0x1A, 0x08, 0x51, 0x00, 0x00,
                                                  0x9C, 0x19, 0x00, 0x9E, 0x19, 0x00, 0x4F, 0x0F, 0x80, 0x65, 0x76, 0x1A, 0x08, 0x51, 0x00, 0x00,
                                                  0x25, 0x00, 0x00, 0x03, 0x26, 0x0D, 0x80, 0xB1, 0x01, 0x21, 0x0D, 0x80, 0x00, 0x00, 0x06, 0x01,
                                                  0x95, 0x66, 0x1A, 0x08, 0x26, 0x0D, 0x80, 0x83, 0x01, 0x19, 0x08, 0x80, 0x0D, 0x80, 0x21, 0x08,
                                                  0x80, 0x00, 0x00, 0x06, 0x01, 0x95, 0x66, 0x1A, 0x08, 0x21, 0x08, 0x80, 0x01, 0x00, 0x06, 0x01,
                                                  0xAE, 0x66, 0x1A, 0x08, 0x02, 0x67, 0xA3, 0x55, 0x1A, 0x08, 0x66, 0x4F, 0x0F, 0x80, 0xE4, 0x66,
                                                  0x1A, 0x08, 0x51, 0x00, 0x00, 0x0F, 0x00, 0x89, 0x55, 0x1A, 0x08, 0x09, 0x04, 0x03, 0x2B, 0x42,
                                                  0x08, 0x06, 0x01, 0x95, 0x66, 0x1A, 0x08, 0x0F, 0x00, 0xA3, 0x55, 0x1A, 0x08, 0x09, 0x04, 0x29,
                                                  0x42, 0x08, 0x67, 0x3D, 0xCD, 0x1B, 0x08, 0x66, 0x4F, 0x0F, 0x80, 0xE4, 0x66, 0x1A, 0x08, 0x51,
                                                  0x00, 0x00, 0x0F, 0x00, 0x89, 0x55, 0x1A, 0x08, 0x09, 0x04, 0x03, 0x0F, 0x00, 0x89, 0x55, 0x1A,
                                                  0x08,
                            };
                            bw.Seek(Convert.ToInt32(instaPC), SeekOrigin.Begin);
                            bw.Write(instaPCOff);
                        }
                        if (speechSkipButtonOn.Checked)
                        {
                            byte[] speechSkipTrue = { 0x01, 0x00, 0x78 };
                            byte[] speechSkip2True = {
                            0x04, 0x4B, 0x1A, 0x68, 0x00, 0x21, 0xD1, 0x74, 0x02, 0x21, 0x11, 0x75, 0x02, 0x21, 0x51, 0x75,
                            0x70, 0x47, 0x00, 0x00, 0x0C, 0x50, 0x00, 0x03 };
                            bw.Seek(Convert.ToInt32(speechSkip), SeekOrigin.Begin);
                            bw.Write(speechSkipTrue);
                            bw.Seek(Convert.ToInt32(speechSkipInfo3), SeekOrigin.Begin);
                            bw.Write(speechSkip2True);
                        }
                        if (speechSkipButtonOff.Checked)
                        {

                            if (fireRedVersion == "FasterFireRed")
                            {
                                byte[] speechSkipFalse = { 0xF1, 0xFD, 0x12 };
                                byte[] speechSkip2False =
                                {
                                0x14, 0x4B, 0x1A, 0x68, 0x11, 0x7D, 0x08, 0x20, 0x40, 0x42, 0x08, 0x40, 0x01, 0x21, 0x08, 0x43,
                                0x10, 0x75, 0x1A, 0x68, 0x11, 0x7D, 0x07, 0x20,
                                };
                                bw.Seek(Convert.ToInt32(speechSkip), SeekOrigin.Begin);
                                bw.Write(speechSkipFalse);
                                bw.Seek(Convert.ToInt32(speechSkipInfo3), SeekOrigin.Begin);
                                bw.Write(speechSkip2False);
                            }
                            else if (fireRedVersion == "OldFireRed")
                            {
                                byte[] speechSkipFalse = { 0xE9, 0xB9, 0xC8 };
                                byte[] speechSkip2False =
                                {
                                0x14, 0x4B, 0x1A, 0x68, 0x11, 0x7D, 0x08, 0x20, 0x40, 0x42, 0x08, 0x40, 0x01, 0x21, 0x08, 0x43,
                                0x10, 0x75, 0x1A, 0x68, 0x11, 0x7D, 0x07, 0x20,
                                };
                                bw.Seek(Convert.ToInt32(speechSkip), SeekOrigin.Begin);
                                bw.Write(speechSkipFalse);
                                bw.Seek(Convert.ToInt32(speechSkipInfo3), SeekOrigin.Begin);
                                bw.Write(speechSkip2False);
                            }
                        }
                    }
                    if (gameCode == "BPEE") // Emerald
                    {
                        byte[] speechSkipInfoTrue = {
                            0x00, 0xB5, 0x05, 0x48, 0x00, 0x68, 0x05, 0x49, 0x00, 0xF0, 0x01, 0xF8, 0x00, 0xBD, 0x01, 0x4A,
                            0x10, 0x47, 0x00, 0x00, 0xA1, 0x8B, 0x00, 0x08, 0x90, 0x5D, 0x00, 0x03, 0x31, 0x86, 0x5E, 0x08
                        };
                        bw.Seek(Convert.ToInt32(speechSkip), SeekOrigin.Begin);
                        bw.Write(speechSkipInfoTrue);
                        if (instaPCOn.Checked)
                            {
                                byte[] instaPCOn =
                                {
                                0x6A, 0x5A,
                                0x16, 0x04, 0x80, 0x00, 0x00, 0x26, 0x0D, 0x80, 0xD9, 0x01, 0x21, 0x0D, 0x80, 0x04, 0x00, 0x06,
                                0x01, 0x68, 0x1A, 0x27, 0x08, 0x04, 0x5A, 0x19, 0x27, 0x08, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                                0xFF, 0xFF, 0xFF, 0xFF, 0x67, 0xDB, 0x27, 0x27, 0x08, 0x03, 0xC3, 0x0F, 0x21, 0x04, 0x80, 0x00,
                                0x00, 0x07, 0x01, 0x87, 0x19, 0x27, 0x08, 0x21, 0x04, 0x80, 0x01, 0x00, 0x07, 0x01, 0x8D, 0x19,
                                0x27, 0x08, 0x66, 0x04, 0x93, 0x19, 0x27, 0x08, 0x2B, 0x11, 0x01, 0x06, 0x00, 0x43, 0x1A, 0x27,
                                0x08, 0x05, 0xE2, 0x19, 0x27, 0x08, 0x02, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0xFF, 0xFF,
                                0xFF, 0xFF, 0xFF, 0x4F, 0x0B, 0x80, 0xA4, 0x25, 0x27, 0x08, 0x51, 0x00, 0x00, 0x9C, 0x19, 0x00,
                                0x9E, 0x19, 0x00, 0x4F, 0x0B, 0x80, 0xAA, 0x25, 0x27, 0x08, 0x51, 0x00, 0x00, 0x25, 0x00, 0x00,
                                0x03, 0x26, 0x0D, 0x80, 0x03, 0x02, 0x21, 0x0D, 0x80, 0x00, 0x00, 0x06, 0x01, 0xE2, 0x19, 0x27,
                                0x08, 0x26, 0x0D, 0x80, 0xA5, 0x01, 0x19, 0x08, 0x80, 0x0D, 0x80, 0x21, 0x08, 0x80, 0x00, 0x00,
                                0x06, 0x01, 0xE2, 0x19, 0x27, 0x08, 0x21, 0x08, 0x80, 0x01, 0x00, 0x06, 0x01, 0x19, 0x1A, 0x27,
                                0x08, 0x02, 0x21, 0x04, 0x80, 0x01, 0x00, 0x06, 0x01, 0x03, 0x1A, 0x27, 0x08, 0x4F, 0x0B, 0x80,
                                0xD0, 0x1A, 0x27, 0x08, 0x4F, 0xFF, 0x00, 0xB0, 0x25, 0x27, 0x08, 0x51, 0x00, 0x00, 0x6B, 0x03,
                                0xFF, 0xFF, 0xFF, 0x4F, 0x0B, 0x80, 0xD0, 0x1A, 0x27, 0x08, 0x4F, 0xFF, 0x00, 0xB0, 0x25, 0x27,
                                0x08, 0x51, 0x00, 0x00, 0x6B, 0x03, 0xFF, 0xFF, 0xFF, 0x2B, 0x80, 0x08, 0x06, 0x01, 0xE2, 0x19,
                                0x27, 0x08, 0x29, 0x80, 0x08, 0x67, 0x48, 0x8A, 0x27, 0x08, 0x66, 0x4F, 0x0B, 0x80, 0xD0, 0x1A,
                                0x27, 0x08, 0x51, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                                0xFF, 0xFF, 0xFF, 0x26, 0x0D, 0x80, 0x36, 0x01, 0x21, 0x0D, 0x80, 0x01, 0x00, 0x06, 0x01, 0x5F,
                                0x1A, 0x27, 0x08, 0x05, 0xE2, 0x19, 0x27, 0x08, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x67,
                                0x07, 0x2F, 0x27, 0x08, 0x29, 0x11, 0x01, 0x03, 0x2B, 0x59, 0x01, 0x06, 0x01, 0xAC, 0x1A, 0x27,
                                0x08, 0x29, 0x59, 0x01, 0x0F, 0x00, 0xF5, 0x27, 0x27, 0x08, 0x09, 0x04, 0x2F, 0x15, 0x00, 0x4F,
                                0x0B, 0x80, 0x98, 0x25, 0x27, 0x08, 0x51, 0x00, 0x00, 0x4F, 0x0B, 0x80, 0x9A, 0x25, 0x27, 0x08,
                                0x51, 0x00, 0x00, 0x0F, 0x00, 0x60, 0x28, 0x27, 0x08, 0x09, 0x05, 0x21, 0x0D, 0x80, 0x01, 0x00,
                                0x06, 0x01, 0xC5, 0x1A, 0x27, 0x08, 0x67, 0x07, 0x2A, 0x27, 0x08, 0x03, 0x0F, 0x00, 0x82, 0x29,
                                0x27, 0x08, 0x09, 0x05, 0x21, 0x0D, 0x80, 0x01, 0x00, 0x06, 0x01, 0xC5, 0x1A, 0x27, 0x08, 0x67,
                                0x07, 0x2A, 0x27, 0x08, 0x03, 0x16, 0x04, 0x80, 0x01, 0x00, 0x05, 0x5A, 0x19, 0x27, 0x08, 0x02,
                                0x4F, 0xFE, 0xFF,
                            };
                                bw.Seek(Convert.ToInt32(instaPC), SeekOrigin.Begin);
                                bw.Write(instaPCOn);
                            }
                        if (instaPCOff.Checked)
                            {
                                byte[] instaPCOff =
                                {
                                0x6A, 0x5A,
                                0x16, 0x04, 0x80, 0x00, 0x00, 0x26, 0x0D, 0x80, 0xD9, 0x01, 0x21, 0x0D, 0x80, 0x04, 0x00, 0x06,
                                0x01, 0x68, 0x1A, 0x27, 0x08, 0x0F, 0x00, 0xEB, 0x26, 0x27, 0x08, 0x09, 0x05, 0x21, 0x0D, 0x80,
                                0x01, 0x00, 0x06, 0x01, 0x5A, 0x19, 0x27, 0x08, 0x21, 0x0D, 0x80, 0x00, 0x00, 0x06, 0x01, 0x54,
                                0x19, 0x27, 0x08, 0x02, 0x67, 0xDB, 0x27, 0x27, 0x08, 0x03, 0xC3, 0x0F, 0x21, 0x04, 0x80, 0x00,
                                0x00, 0x07, 0x01, 0x87, 0x19, 0x27, 0x08, 0x21, 0x04, 0x80, 0x01, 0x00, 0x07, 0x01, 0x8D, 0x19,
                                0x27, 0x08, 0x66, 0x04, 0x93, 0x19, 0x27, 0x08, 0x2B, 0x11, 0x01, 0x06, 0x00, 0x43, 0x1A, 0x27,
                                0x08, 0x05, 0xE2, 0x19, 0x27, 0x08, 0x02, 0x67, 0x68, 0x27, 0x27, 0x08, 0x03, 0x67, 0xC0, 0x29,
                                0x27, 0x08, 0x03, 0x4F, 0x0B, 0x80, 0xA4, 0x25, 0x27, 0x08, 0x51, 0x00, 0x00, 0x9C, 0x19, 0x00,
                                0x9E, 0x19, 0x00, 0x4F, 0x0B, 0x80, 0xAA, 0x25, 0x27, 0x08, 0x51, 0x00, 0x00, 0x25, 0x00, 0x00,
                                0x03, 0x26, 0x0D, 0x80, 0x03, 0x02, 0x21, 0x0D, 0x80, 0x00, 0x00, 0x06, 0x01, 0xE2, 0x19, 0x27,
                                0x08, 0x26, 0x0D, 0x80, 0xA5, 0x01, 0x19, 0x08, 0x80, 0x0D, 0x80, 0x21, 0x08, 0x80, 0x00, 0x00,
                                0x06, 0x01, 0xE2, 0x19, 0x27, 0x08, 0x21, 0x08, 0x80, 0x01, 0x00, 0x06, 0x01, 0x19, 0x1A, 0x27,
                                0x08, 0x02, 0x21, 0x04, 0x80, 0x01, 0x00, 0x06, 0x01, 0x03, 0x1A, 0x27, 0x08, 0x67, 0x98, 0x27,
                                0x27, 0x08, 0x66, 0x4F, 0x0B, 0x80, 0xD0, 0x1A, 0x27, 0x08, 0x51, 0x00, 0x00, 0x67, 0xDB, 0x27,
                                0x27, 0x08, 0x03, 0x67, 0xF0, 0x29, 0x27, 0x08, 0x66, 0x4F, 0x0B, 0x80, 0xD0, 0x1A, 0x27, 0x08,
                                0x51, 0x00, 0x00, 0x67, 0x07, 0x2A, 0x27, 0x08, 0x03, 0x2B, 0x80, 0x08, 0x06, 0x01, 0xE2, 0x19,
                                0x27, 0x08, 0x0F, 0x00, 0x98, 0x27, 0x27, 0x08, 0x09, 0x04, 0x29, 0x80, 0x08, 0x67, 0x48, 0x8A,
                                0x27, 0x08, 0x66, 0x4F, 0x0B, 0x80, 0xD0, 0x1A, 0x27, 0x08, 0x51, 0x00, 0x00, 0x67, 0xDB, 0x27,
                                0x27, 0x08, 0x03, 0x26, 0x0D, 0x80, 0x36, 0x01, 0x21, 0x0D, 0x80, 0x01, 0x00, 0x06, 0x01, 0x5F,
                                0x1A, 0x27, 0x08, 0x05, 0xE2, 0x19, 0x27, 0x08, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x67,
                                0x07, 0x2F, 0x27, 0x08, 0x29, 0x11, 0x01, 0x03, 0x2B, 0x59, 0x01, 0x06, 0x01, 0xAC, 0x1A, 0x27,
                                0x08, 0x29, 0x59, 0x01, 0x0F, 0x00, 0xF5, 0x27, 0x27, 0x08, 0x09, 0x04, 0x2F, 0x15, 0x00, 0x4F,
                                0x0B, 0x80, 0x98, 0x25, 0x27, 0x08, 0x51, 0x00, 0x00, 0x4F, 0x0B, 0x80, 0x9A, 0x25, 0x27, 0x08,
                                0x51, 0x00, 0x00, 0x0F, 0x00, 0x60, 0x28, 0x27, 0x08, 0x09, 0x05, 0x21, 0x0D, 0x80, 0x01, 0x00,
                                0x06, 0x01, 0xC5, 0x1A, 0x27, 0x08, 0x67, 0x07, 0x2A, 0x27, 0x08, 0x03, 0x0F, 0x00, 0x82, 0x29,
                                0x27, 0x08, 0x09, 0x05, 0x21, 0x0D, 0x80, 0x01, 0x00, 0x06, 0x01, 0xC5, 0x1A, 0x27, 0x08, 0x67,
                                0x07, 0x2A, 0x27, 0x08, 0x03, 0x16, 0x04, 0x80, 0x01, 0x00, 0x05, 0x5A, 0x19, 0x27, 0x08, 0x02,
                                0x4F, 0x12, 0xFE
                            };
                                bw.Seek(Convert.ToInt32(instaPC), SeekOrigin.Begin);
                                bw.Write(instaPCOff);
                            }
                        if (speechSkipButtonOn.Checked)
                        {
                            byte[] callASM = {
                                0x23, 0x01, 0x00, 0xE4, 0x08, 0xA2, 0x04, 0x00, 0x02, 0x00, 0x10,
                                0x02, 0x00, 0x00, 0xA2, 0x04, 0x00, 0x03, 0x00, 0x18, 0x02, 0x00, 0x00, 0x02, 0xFF, 0xFF, 0xFF,
                                0xFF 
                            };
                            byte[] callASM2 = { 0x02, 0x20 };
                            byte[] callASM3 = {
                                0x10, 0xB5, 0x81, 0xB0, 0x04, 0x1C, 0x24, 0x06, 0x24, 0x0E, 0x00, 0x20, 0x00, 0x21, 0xD0, 0xF7,
                                0x79, 0xFC, 0x82, 0x21, 0x49, 0x01, 0x00, 0x20, 0xD0, 0xF7, 0x74, 0xFC, 0x2C, 0x48, 0xD1, 0xF7,
                                0x6F, 0xF8, 0x40, 0x20, 0x00, 0x21, 0xD0, 0xF7, 0x6D, 0xFC, 0x44, 0x20, 0x00, 0x21, 0xD0, 0xF7,
                                0x69, 0xFC, 0x48, 0x20, 0x00, 0x21, 0xD0, 0xF7, 0x65, 0xFC, 0x4A, 0x20, 0x00, 0x21, 0xD0, 0xF7,
                                0x61, 0xFC, 0x50, 0x20, 0x00, 0x21, 0xD0, 0xF7, 0x5D, 0xFC, 0x52, 0x20, 0x00, 0x21, 0xD0, 0xF7,
                                0x59, 0xFC, 0x54, 0x20, 0x00, 0x21, 0xD0, 0xF7, 0x55, 0xFC, 0x1E, 0x48, 0xC0, 0x21, 0xC9, 0x04,
                                0xB6, 0xF2, 0x3C, 0xFC, 0x1C, 0x48, 0x1D, 0x49, 0xB6, 0xF2, 0x38, 0xFC, 0x1C, 0x48, 0x00, 0x21,
                                0x40, 0x22, 0x71, 0xF0, 0x89, 0xF8, 0x1B, 0x48, 0x01, 0x21, 0x10, 0x22, 0x71, 0xF0, 0x84, 0xF8,
                                0x89, 0xF0, 0xC2, 0xFB, 0xD6, 0xF7, 0x9E, 0xF8, 0xD7, 0xF7, 0x68, 0xFF, 0x5C, 0xF1, 0xC6, 0xFB,
                                0x20, 0x1C, 0x01, 0xF0, 0x73, 0xF8, 0x01, 0x20, 0x40, 0x42, 0x00, 0x21, 0x00, 0x91, 0x10, 0x22,
                                0x00, 0x23, 0x71, 0xF0, 0x3F, 0xF9, 0x10, 0x48, 0x01, 0x68, 0x01, 0x20, 0x08, 0x72, 0x0F, 0x49,
                                0xA0, 0x00, 0x00, 0x19, 0xC0, 0x00, 0x40, 0x18, 0x0D, 0x49, 0x01, 0x60, 0xFF, 0x21, 0x81, 0x81,
                                0xC1, 0x81, 0xD8, 0x21, 0xC1, 0x82, 0x01, 0xB0, 0x10, 0xBC, 0x01, 0xBC, 0x00, 0x47, 0x00, 0x00,
                                0xF0, 0xF0, 0x2F, 0x08, 0x3C, 0xED, 0x2F, 0x08, 0xF0, 0xEE, 0x2F, 0x08, 0x00, 0x38, 0x00, 0x06,
                                0xFC, 0xEC, 0x2F, 0x08, 0x28, 0xF0, 0x2F, 0x08, 0x90, 0x5D, 0x00, 0x03, 0x00, 0x5E, 0x00, 0x03,
                                0x31, 0x16, 0x03, 0x08, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                0x00
                            };
                            bw.Seek(Convert.ToInt32(speechSkipInfo2), SeekOrigin.Begin);
                            bw.Write(callASM);
                            bw.Seek(Convert.ToInt32(speechSkipInfo3), SeekOrigin.Begin);
                            bw.Write(callASM2);
                            bw.Seek(Convert.ToInt32(speechSkipInfo4), SeekOrigin.Begin);
                            bw.Write(callASM3);
                            if (radioButtonMale.Checked == true)
                            {
                                bw.Seek(Convert.ToInt32(playerGender), SeekOrigin.Begin);
                                bw.Write((byte)0x00);
                            }
                            if (radioButtonFemale.Checked == true)
                            {
                                bw.Seek(Convert.ToInt32(playerGender), SeekOrigin.Begin);
                                bw.Write((byte)0x01);
                            }
                        }
                        if (speechSkipButtonOff.Checked)
                        {
                            byte[] callASM = {
                                0xA2, 0x04, 0x00, 0x01, 0x00, 0x08, 0x02, 0x00, 0x00, 0xA2, 0x04,
                                0x00, 0x02, 0x00, 0x10, 0x02, 0x00, 0x00, 0xA2, 0x04, 0x00, 0x03, 0x00, 0x18, 0x02, 0x00, 0x00,
                                0x02,
                            };
                            byte[] callASM2 = { 0x08, 0x40 };
                            byte[] callASM3 = {
                                0x30, 0xB5, 0x81, 0xB0, 0x04, 0x1C, 0x24, 0x06, 0x24, 0x0E, 0x00, 0x20, 0x00, 0x21, 0xD0, 0xF7,
                                0x79, 0xFC, 0x82, 0x21, 0x49, 0x01, 0x00, 0x20, 0xD0, 0xF7, 0x74, 0xFC, 0x30, 0x48, 0xD1, 0xF7,
                                0x6F, 0xF8, 0x40, 0x20, 0x00, 0x21, 0xD0, 0xF7, 0x6D, 0xFC, 0x44, 0x20, 0x00, 0x21, 0xD0, 0xF7,
                                0x69, 0xFC, 0x48, 0x20, 0x00, 0x21, 0xD0, 0xF7, 0x65, 0xFC, 0x4A, 0x20, 0x00, 0x21, 0xD0, 0xF7,
                                0x61, 0xFC, 0x50, 0x20, 0x00, 0x21, 0xD0, 0xF7, 0x5D, 0xFC, 0x52, 0x20, 0x00, 0x21, 0xD0, 0xF7,
                                0x59, 0xFC, 0x54, 0x20, 0x00, 0x21, 0xD0, 0xF7, 0x55, 0xFC, 0x22, 0x48, 0xC0, 0x21, 0xC9, 0x04,
                                0xB6, 0xF2, 0x3C, 0xFC, 0x20, 0x48, 0x21, 0x49, 0xB6, 0xF2, 0x38, 0xFC, 0x20, 0x48, 0x00, 0x21,
                                0x40, 0x22, 0x71, 0xF0, 0x89, 0xF8, 0x1F, 0x48, 0x01, 0x21, 0x10, 0x22, 0x71, 0xF0, 0x84, 0xF8,
                                0x89, 0xF0, 0xC2, 0xFB, 0xD6, 0xF7, 0x9E, 0xF8, 0xD7, 0xF7, 0x68, 0xFF, 0x5C, 0xF1, 0xC6, 0xFB,
                                0x20, 0x1C, 0x01, 0xF0, 0x73, 0xF8, 0x01, 0x20, 0x40, 0x42, 0x00, 0x25, 0x00, 0x95, 0x00, 0x21,
                                0x10, 0x22, 0x00, 0x23, 0x71, 0xF0, 0x3E, 0xF9, 0x13, 0x49, 0x01, 0x00, 0x00, 0x19, 0xC0, 0x00,
                                0x40, 0x18, 0x05, 0x82, 0x11, 0x49, 0x01, 0x60, 0xFF, 0x21, 0x81, 0x81, 0xC1, 0x81, 0x00, 0x21,
                                0xC1, 0x82, 0x77, 0x20, 0xFF, 0x30, 0x72, 0xF0, 0x7F, 0xFF, 0x00, 0x20, 0xD1, 0xF7, 0x58, 0xF9,
                                0x01, 0x20, 0xD1, 0xF7, 0x55, 0xF9, 0x01, 0xB0, 0x30, 0xBC, 0x01, 0xBC, 0x00, 0x47, 0x00, 0x00,
                                0xF0, 0xF0, 0x2F, 0x08, 0x3C, 0xED, 0x2F, 0x08, 0xF0, 0xEE, 0x2F, 0x08, 0x00, 0x38, 0x00, 0x06,
                                0xFC, 0xEC, 0x2F, 0x08, 0x28, 0xF0, 0x2F, 0x08, 0x00, 0x5E, 0x00, 0x03, 0xB1, 0x08, 0x03, 0x08,
                                0x30
                            };
                            bw.Seek(Convert.ToInt32(speechSkipInfo2), SeekOrigin.Begin);
                            bw.Write(callASM);
                            bw.Seek(Convert.ToInt32(speechSkipInfo3), SeekOrigin.Begin);
                            bw.Write(callASM2);
                            bw.Seek(Convert.ToInt32(speechSkipInfo4), SeekOrigin.Begin);
                            bw.Write(callASM3);
                            bw.Seek(Convert.ToInt32(playerGender), SeekOrigin.Begin);
                            bw.Write((byte)0xA0);
                        }
                    }
                    if (radioButtonMale.Checked == true)
                    {
                        bw.Seek(Convert.ToInt32(playerGender), SeekOrigin.Begin);
                        bw.Write((byte)0x00);
                    }
                    if (radioButtonFemale.Checked == true)
                    {
                        bw.Seek(Convert.ToInt32(playerGender), SeekOrigin.Begin);
                        bw.Write((byte)0x01);
                    }       
                }
                MessageBox.Show("File saved successfully!", "Saved", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            }
            catch (IOException ex)
            {
                MessageBox.Show("Could not save ROM file.\nCheck to see if the file is open in another program.\n\n" + ex.Message, "I/O Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        public static byte[] StringToByteArray(String hex)
        {
            int NumberChars = hex.Length / 2;
            byte[] bytes = new byte[NumberChars];
            using (var sr = new StringReader(hex))
            {
                for (int i = 0; i < NumberChars; i++)
                    bytes[i] =
                      Convert.ToByte(new string(new char[2] { (char)sr.Read(), (char)sr.Read() }), 16);
            }
            return bytes;
        }

        private string ROMCharactersToString(int maxLength, uint baseLocation)
        {
            string s = "";
            using (BinaryReader br = new BinaryReader(File.OpenRead(currentROM)))
            {
                for (int j = 0; j < maxLength; j++)
                {
                    br.BaseStream.Seek(baseLocation + j, SeekOrigin.Begin);
                    byte textByte = br.ReadByte();
                    if ((textByte != 0xFF))
                    {
                        bool success = mapToASCII.TryGetValue(textByte, out char temp);
                        s += temp;
                    }
                    else
                    {
                        break;
                    }
                }
            }
            return s;
        }

        public void EnableEverything()
        {
            nameGroupBox.Enabled = true;
            genderChoiceGroup.Enabled = true;
            instaPCBox.Enabled = true;
            stepItemsBox.Enabled = true;
            speechSkipBox.Enabled = true;
            btnSave.Enabled = true;
        }

        public void DisableEverything()
        {
            nameGroupBox.Enabled = false;
            genderChoiceGroup.Enabled = false;
            instaPCBox.Enabled = false;
            stepItemsBox.Enabled = false;
            speechSkipBox.Enabled = false;
            btnSave.Enabled = false;
        }

        private void BtnExit_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void BtnAbout_Click(object sender, EventArgs e)
        {
            MessageBox.Show("IronMON Intro Namer v1\n\nCreated by DrMaple\n\nOriginally Based on GBA Intro Manager by Diegoisawesome\nhttps://github.com/Sierraffinity/GBAIntroManager", "About");
        }

        private void BtnReadme_Click(object sender, EventArgs e)
        {
            try
            {
                string fileLoc = Application.StartupPath + "/Readme.txt";
                Process.Start(fileLoc);
            }
            catch (Win32Exception ex)
            {
                MessageBox.Show("Could not open Readme.txt. Did you delete it?\n\n" + ex.Message, "I/O Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        private void LinkLabelGithub_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            try
            {
                System.Diagnostics.Process.Start("https://github.com/DrMaple/ironmon-patches");
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
                MessageBox.Show("Could not open the link.\n\n" + ex.Message, "I/O Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        private void SpeechSkipButtonOff_CheckedChanged(object sender, EventArgs e)
        {
            using (BinaryReader br = new BinaryReader(File.OpenRead(currentROM)))
            if (speechSkipButtonOff.Checked == true)
            {
                nameGroupBox.Enabled = false;
                genderChoiceGroup.Enabled = false;
                playerNameTextBox.Text = String.Empty;
                rivalNameTextBox.Text = String.Empty;
                radioButtonMale.Checked = false;
                radioButtonFemale.Checked = false;
            }
            else if (speechSkipButtonOn.Checked == true)
            {
                nameGroupBox.Enabled = true;
                genderChoiceGroup.Enabled = true;

                br.BaseStream.Seek(playerName, SeekOrigin.Begin);
                playerNameTextBox.Text = ROMCharactersToString(7, playerName);

                br.BaseStream.Seek(playerGender, SeekOrigin.Begin);
                string gender = Convert.ToString(br.ReadByte());
                if (gender == "1")
                    radioButtonFemale.Checked = true;
                else if (gender == "0")
                    radioButtonMale.Checked = true;
                else
                    radioButtonFemale.Checked = true;
                if (gameCode == "BPRE")
                {
                    br.BaseStream.Seek(rivalName, SeekOrigin.Begin);
                    rivalNameTextBox.Text = ROMCharactersToString(7, rivalName);
                }
            }
        }
    }
}
public class Encoder
{
    readonly Dictionary<char, string> mapToGame = new Dictionary<char, string>();
    public Encoder()
    {
        mapToGame.Add('0', "A1");
        mapToGame.Add('1', "A2");
        mapToGame.Add('2', "A3");
        mapToGame.Add('3', "A4");
        mapToGame.Add('4', "A5");
        mapToGame.Add('5', "A6");
        mapToGame.Add('6', "A7");
        mapToGame.Add('7', "A8");
        mapToGame.Add('8', "A9");
        mapToGame.Add('9', "AA");
        mapToGame.Add('!', "AB");
        mapToGame.Add('?', "AC");
        mapToGame.Add('.', "AD");
        mapToGame.Add('-', "AE");
        mapToGame.Add(',', "B8");
        mapToGame.Add('/', "BA");
        mapToGame.Add('A', "BB");
        mapToGame.Add('B', "BC");
        mapToGame.Add('C', "BD");
        mapToGame.Add('D', "BE");
        mapToGame.Add('E', "BF");
        mapToGame.Add('F', "C0");
        mapToGame.Add('G', "C1");
        mapToGame.Add('H', "C2");
        mapToGame.Add('I', "C3");
        mapToGame.Add('J', "C4");
        mapToGame.Add('K', "C5");
        mapToGame.Add('L', "C6");
        mapToGame.Add('M', "C7");
        mapToGame.Add('N', "C8");
        mapToGame.Add('O', "C9");
        mapToGame.Add('P', "CA");
        mapToGame.Add('Q', "CB");
        mapToGame.Add('R', "CC");
        mapToGame.Add('S', "CD");
        mapToGame.Add('T', "CE");
        mapToGame.Add('U', "CF");
        mapToGame.Add('V', "D0");
        mapToGame.Add('W', "D1");
        mapToGame.Add('X', "D2");
        mapToGame.Add('Y', "D3");
        mapToGame.Add('Z', "D4");
        mapToGame.Add('a', "D5");
        mapToGame.Add('b', "D6");
        mapToGame.Add('c', "D7");
        mapToGame.Add('d', "D8");
        mapToGame.Add('e', "D9");
        mapToGame.Add('f', "DA");
        mapToGame.Add('g', "DB");
        mapToGame.Add('h', "DC");
        mapToGame.Add('i', "DD");
        mapToGame.Add('j', "DE");
        mapToGame.Add('k', "DF");
        mapToGame.Add('l', "E0");
        mapToGame.Add('m', "E1");
        mapToGame.Add('n', "E2");
        mapToGame.Add('o', "E3");
        mapToGame.Add('p', "E4");
        mapToGame.Add('q', "E5");
        mapToGame.Add('r', "E6");
        mapToGame.Add('s', "E7");
        mapToGame.Add('t', "E8");
        mapToGame.Add('u', "E9");
        mapToGame.Add('v', "EA");
        mapToGame.Add('w', "EB");
        mapToGame.Add('x', "EC");
        mapToGame.Add('y', "ED");
        mapToGame.Add('z', "EE");
        mapToGame.Add(' ', "00");

    }
    public string ConvertString(string input)
    {
        string output = string.Empty;
        foreach (var item in input)
        {
            output += mapToGame[item];
        }
        return output;
    }
}
